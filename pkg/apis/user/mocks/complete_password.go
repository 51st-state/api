// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/51st-state/api/pkg/apis/user"
)

type FakeCompletePassword struct {
	HashStub        func() []byte
	hashMutex       sync.RWMutex
	hashArgsForCall []struct{}
	hashReturns     struct {
		result1 []byte
	}
	hashReturnsOnCall map[int]struct {
		result1 []byte
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCompletePassword) Hash() []byte {
	fake.hashMutex.Lock()
	ret, specificReturn := fake.hashReturnsOnCall[len(fake.hashArgsForCall)]
	fake.hashArgsForCall = append(fake.hashArgsForCall, struct{}{})
	fake.recordInvocation("Hash", []interface{}{})
	fake.hashMutex.Unlock()
	if fake.HashStub != nil {
		return fake.HashStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.hashReturns.result1
}

func (fake *FakeCompletePassword) HashCallCount() int {
	fake.hashMutex.RLock()
	defer fake.hashMutex.RUnlock()
	return len(fake.hashArgsForCall)
}

func (fake *FakeCompletePassword) HashReturns(result1 []byte) {
	fake.HashStub = nil
	fake.hashReturns = struct {
		result1 []byte
	}{result1}
}

func (fake *FakeCompletePassword) HashReturnsOnCall(i int, result1 []byte) {
	fake.HashStub = nil
	if fake.hashReturnsOnCall == nil {
		fake.hashReturnsOnCall = make(map[int]struct {
			result1 []byte
		})
	}
	fake.hashReturnsOnCall[i] = struct {
		result1 []byte
	}{result1}
}

func (fake *FakeCompletePassword) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.hashMutex.RLock()
	defer fake.hashMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCompletePassword) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ user.CompletePassword = new(FakeCompletePassword)
