// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/51st-state/api/pkg/apis/inventory"
)

type FakeRepository struct {
	GetStub        func(context.Context, inventory.Identifier) (inventory.Complete, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 context.Context
		arg2 inventory.Identifier
	}
	getReturns struct {
		result1 inventory.Complete
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 inventory.Complete
		result2 error
	}
	CreateStub        func(context.Context) (inventory.Complete, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 context.Context
	}
	createReturns struct {
		result1 inventory.Complete
		result2 error
	}
	createReturnsOnCall map[int]struct {
		result1 inventory.Complete
		result2 error
	}
	AddItemStub        func(context.Context, inventory.Identifier, *inventory.Item) error
	addItemMutex       sync.RWMutex
	addItemArgsForCall []struct {
		arg1 context.Context
		arg2 inventory.Identifier
		arg3 *inventory.Item
	}
	addItemReturns struct {
		result1 error
	}
	addItemReturnsOnCall map[int]struct {
		result1 error
	}
	RemoveItemStub        func(context.Context, inventory.Identifier, *inventory.Item) error
	removeItemMutex       sync.RWMutex
	removeItemArgsForCall []struct {
		arg1 context.Context
		arg2 inventory.Identifier
		arg3 *inventory.Item
	}
	removeItemReturns struct {
		result1 error
	}
	removeItemReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteStub        func(context.Context, inventory.Identifier) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 context.Context
		arg2 inventory.Identifier
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRepository) Get(arg1 context.Context, arg2 inventory.Identifier) (inventory.Complete, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 context.Context
		arg2 inventory.Identifier
	}{arg1, arg2})
	fake.recordInvocation("Get", []interface{}{arg1, arg2})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getReturns.result1, fake.getReturns.result2
}

func (fake *FakeRepository) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeRepository) GetArgsForCall(i int) (context.Context, inventory.Identifier) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return fake.getArgsForCall[i].arg1, fake.getArgsForCall[i].arg2
}

func (fake *FakeRepository) GetReturns(result1 inventory.Complete, result2 error) {
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 inventory.Complete
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) GetReturnsOnCall(i int, result1 inventory.Complete, result2 error) {
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 inventory.Complete
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 inventory.Complete
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) Create(arg1 context.Context) (inventory.Complete, error) {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	fake.recordInvocation("Create", []interface{}{arg1})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createReturns.result1, fake.createReturns.result2
}

func (fake *FakeRepository) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeRepository) CreateArgsForCall(i int) context.Context {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].arg1
}

func (fake *FakeRepository) CreateReturns(result1 inventory.Complete, result2 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 inventory.Complete
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) CreateReturnsOnCall(i int, result1 inventory.Complete, result2 error) {
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 inventory.Complete
			result2 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 inventory.Complete
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) AddItem(arg1 context.Context, arg2 inventory.Identifier, arg3 *inventory.Item) error {
	fake.addItemMutex.Lock()
	ret, specificReturn := fake.addItemReturnsOnCall[len(fake.addItemArgsForCall)]
	fake.addItemArgsForCall = append(fake.addItemArgsForCall, struct {
		arg1 context.Context
		arg2 inventory.Identifier
		arg3 *inventory.Item
	}{arg1, arg2, arg3})
	fake.recordInvocation("AddItem", []interface{}{arg1, arg2, arg3})
	fake.addItemMutex.Unlock()
	if fake.AddItemStub != nil {
		return fake.AddItemStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.addItemReturns.result1
}

func (fake *FakeRepository) AddItemCallCount() int {
	fake.addItemMutex.RLock()
	defer fake.addItemMutex.RUnlock()
	return len(fake.addItemArgsForCall)
}

func (fake *FakeRepository) AddItemArgsForCall(i int) (context.Context, inventory.Identifier, *inventory.Item) {
	fake.addItemMutex.RLock()
	defer fake.addItemMutex.RUnlock()
	return fake.addItemArgsForCall[i].arg1, fake.addItemArgsForCall[i].arg2, fake.addItemArgsForCall[i].arg3
}

func (fake *FakeRepository) AddItemReturns(result1 error) {
	fake.AddItemStub = nil
	fake.addItemReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) AddItemReturnsOnCall(i int, result1 error) {
	fake.AddItemStub = nil
	if fake.addItemReturnsOnCall == nil {
		fake.addItemReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addItemReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) RemoveItem(arg1 context.Context, arg2 inventory.Identifier, arg3 *inventory.Item) error {
	fake.removeItemMutex.Lock()
	ret, specificReturn := fake.removeItemReturnsOnCall[len(fake.removeItemArgsForCall)]
	fake.removeItemArgsForCall = append(fake.removeItemArgsForCall, struct {
		arg1 context.Context
		arg2 inventory.Identifier
		arg3 *inventory.Item
	}{arg1, arg2, arg3})
	fake.recordInvocation("RemoveItem", []interface{}{arg1, arg2, arg3})
	fake.removeItemMutex.Unlock()
	if fake.RemoveItemStub != nil {
		return fake.RemoveItemStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.removeItemReturns.result1
}

func (fake *FakeRepository) RemoveItemCallCount() int {
	fake.removeItemMutex.RLock()
	defer fake.removeItemMutex.RUnlock()
	return len(fake.removeItemArgsForCall)
}

func (fake *FakeRepository) RemoveItemArgsForCall(i int) (context.Context, inventory.Identifier, *inventory.Item) {
	fake.removeItemMutex.RLock()
	defer fake.removeItemMutex.RUnlock()
	return fake.removeItemArgsForCall[i].arg1, fake.removeItemArgsForCall[i].arg2, fake.removeItemArgsForCall[i].arg3
}

func (fake *FakeRepository) RemoveItemReturns(result1 error) {
	fake.RemoveItemStub = nil
	fake.removeItemReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) RemoveItemReturnsOnCall(i int, result1 error) {
	fake.RemoveItemStub = nil
	if fake.removeItemReturnsOnCall == nil {
		fake.removeItemReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeItemReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) Delete(arg1 context.Context, arg2 inventory.Identifier) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 context.Context
		arg2 inventory.Identifier
	}{arg1, arg2})
	fake.recordInvocation("Delete", []interface{}{arg1, arg2})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteReturns.result1
}

func (fake *FakeRepository) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeRepository) DeleteArgsForCall(i int) (context.Context, inventory.Identifier) {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.deleteArgsForCall[i].arg1, fake.deleteArgsForCall[i].arg2
}

func (fake *FakeRepository) DeleteReturns(result1 error) {
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) DeleteReturnsOnCall(i int, result1 error) {
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.addItemMutex.RLock()
	defer fake.addItemMutex.RUnlock()
	fake.removeItemMutex.RLock()
	defer fake.removeItemMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ inventory.Repository = new(FakeRepository)
