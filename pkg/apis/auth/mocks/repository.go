// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"
	"time"

	"github.com/51st-state/api/pkg/apis/auth"
)

type FakeRepository struct {
	LoginAttemptsCountSinceStub        func(ctx context.Context, id string, t time.Time) (uint64, error)
	loginAttemptsCountSinceMutex       sync.RWMutex
	loginAttemptsCountSinceArgsForCall []struct {
		ctx context.Context
		id  string
		t   time.Time
	}
	loginAttemptsCountSinceReturns struct {
		result1 uint64
		result2 error
	}
	loginAttemptsCountSinceReturnsOnCall map[int]struct {
		result1 uint64
		result2 error
	}
	AddLoginAttemptStub        func(ctx context.Context, id string, t time.Time) error
	addLoginAttemptMutex       sync.RWMutex
	addLoginAttemptArgsForCall []struct {
		ctx context.Context
		id  string
		t   time.Time
	}
	addLoginAttemptReturns struct {
		result1 error
	}
	addLoginAttemptReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRepository) LoginAttemptsCountSince(ctx context.Context, id string, t time.Time) (uint64, error) {
	fake.loginAttemptsCountSinceMutex.Lock()
	ret, specificReturn := fake.loginAttemptsCountSinceReturnsOnCall[len(fake.loginAttemptsCountSinceArgsForCall)]
	fake.loginAttemptsCountSinceArgsForCall = append(fake.loginAttemptsCountSinceArgsForCall, struct {
		ctx context.Context
		id  string
		t   time.Time
	}{ctx, id, t})
	fake.recordInvocation("LoginAttemptsCountSince", []interface{}{ctx, id, t})
	fake.loginAttemptsCountSinceMutex.Unlock()
	if fake.LoginAttemptsCountSinceStub != nil {
		return fake.LoginAttemptsCountSinceStub(ctx, id, t)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.loginAttemptsCountSinceReturns.result1, fake.loginAttemptsCountSinceReturns.result2
}

func (fake *FakeRepository) LoginAttemptsCountSinceCallCount() int {
	fake.loginAttemptsCountSinceMutex.RLock()
	defer fake.loginAttemptsCountSinceMutex.RUnlock()
	return len(fake.loginAttemptsCountSinceArgsForCall)
}

func (fake *FakeRepository) LoginAttemptsCountSinceArgsForCall(i int) (context.Context, string, time.Time) {
	fake.loginAttemptsCountSinceMutex.RLock()
	defer fake.loginAttemptsCountSinceMutex.RUnlock()
	return fake.loginAttemptsCountSinceArgsForCall[i].ctx, fake.loginAttemptsCountSinceArgsForCall[i].id, fake.loginAttemptsCountSinceArgsForCall[i].t
}

func (fake *FakeRepository) LoginAttemptsCountSinceReturns(result1 uint64, result2 error) {
	fake.LoginAttemptsCountSinceStub = nil
	fake.loginAttemptsCountSinceReturns = struct {
		result1 uint64
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) LoginAttemptsCountSinceReturnsOnCall(i int, result1 uint64, result2 error) {
	fake.LoginAttemptsCountSinceStub = nil
	if fake.loginAttemptsCountSinceReturnsOnCall == nil {
		fake.loginAttemptsCountSinceReturnsOnCall = make(map[int]struct {
			result1 uint64
			result2 error
		})
	}
	fake.loginAttemptsCountSinceReturnsOnCall[i] = struct {
		result1 uint64
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) AddLoginAttempt(ctx context.Context, id string, t time.Time) error {
	fake.addLoginAttemptMutex.Lock()
	ret, specificReturn := fake.addLoginAttemptReturnsOnCall[len(fake.addLoginAttemptArgsForCall)]
	fake.addLoginAttemptArgsForCall = append(fake.addLoginAttemptArgsForCall, struct {
		ctx context.Context
		id  string
		t   time.Time
	}{ctx, id, t})
	fake.recordInvocation("AddLoginAttempt", []interface{}{ctx, id, t})
	fake.addLoginAttemptMutex.Unlock()
	if fake.AddLoginAttemptStub != nil {
		return fake.AddLoginAttemptStub(ctx, id, t)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.addLoginAttemptReturns.result1
}

func (fake *FakeRepository) AddLoginAttemptCallCount() int {
	fake.addLoginAttemptMutex.RLock()
	defer fake.addLoginAttemptMutex.RUnlock()
	return len(fake.addLoginAttemptArgsForCall)
}

func (fake *FakeRepository) AddLoginAttemptArgsForCall(i int) (context.Context, string, time.Time) {
	fake.addLoginAttemptMutex.RLock()
	defer fake.addLoginAttemptMutex.RUnlock()
	return fake.addLoginAttemptArgsForCall[i].ctx, fake.addLoginAttemptArgsForCall[i].id, fake.addLoginAttemptArgsForCall[i].t
}

func (fake *FakeRepository) AddLoginAttemptReturns(result1 error) {
	fake.AddLoginAttemptStub = nil
	fake.addLoginAttemptReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) AddLoginAttemptReturnsOnCall(i int, result1 error) {
	fake.AddLoginAttemptStub = nil
	if fake.addLoginAttemptReturnsOnCall == nil {
		fake.addLoginAttemptReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addLoginAttemptReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.loginAttemptsCountSinceMutex.RLock()
	defer fake.loginAttemptsCountSinceMutex.RUnlock()
	fake.addLoginAttemptMutex.RLock()
	defer fake.addLoginAttemptMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ auth.Repository = new(FakeRepository)
