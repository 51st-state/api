// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/51st-state/api/pkg/pubsub"
)

type FakeMessage struct {
	AckStub         func()
	ackMutex        sync.RWMutex
	ackArgsForCall  []struct{}
	NackStub        func()
	nackMutex       sync.RWMutex
	nackArgsForCall []struct{}
	DataStub        func() []byte
	dataMutex       sync.RWMutex
	dataArgsForCall []struct{}
	dataReturns     struct {
		result1 []byte
	}
	dataReturnsOnCall map[int]struct {
		result1 []byte
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMessage) Ack() {
	fake.ackMutex.Lock()
	fake.ackArgsForCall = append(fake.ackArgsForCall, struct{}{})
	fake.recordInvocation("Ack", []interface{}{})
	fake.ackMutex.Unlock()
	if fake.AckStub != nil {
		fake.AckStub()
	}
}

func (fake *FakeMessage) AckCallCount() int {
	fake.ackMutex.RLock()
	defer fake.ackMutex.RUnlock()
	return len(fake.ackArgsForCall)
}

func (fake *FakeMessage) Nack() {
	fake.nackMutex.Lock()
	fake.nackArgsForCall = append(fake.nackArgsForCall, struct{}{})
	fake.recordInvocation("Nack", []interface{}{})
	fake.nackMutex.Unlock()
	if fake.NackStub != nil {
		fake.NackStub()
	}
}

func (fake *FakeMessage) NackCallCount() int {
	fake.nackMutex.RLock()
	defer fake.nackMutex.RUnlock()
	return len(fake.nackArgsForCall)
}

func (fake *FakeMessage) Data() []byte {
	fake.dataMutex.Lock()
	ret, specificReturn := fake.dataReturnsOnCall[len(fake.dataArgsForCall)]
	fake.dataArgsForCall = append(fake.dataArgsForCall, struct{}{})
	fake.recordInvocation("Data", []interface{}{})
	fake.dataMutex.Unlock()
	if fake.DataStub != nil {
		return fake.DataStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.dataReturns.result1
}

func (fake *FakeMessage) DataCallCount() int {
	fake.dataMutex.RLock()
	defer fake.dataMutex.RUnlock()
	return len(fake.dataArgsForCall)
}

func (fake *FakeMessage) DataReturns(result1 []byte) {
	fake.DataStub = nil
	fake.dataReturns = struct {
		result1 []byte
	}{result1}
}

func (fake *FakeMessage) DataReturnsOnCall(i int, result1 []byte) {
	fake.DataStub = nil
	if fake.dataReturnsOnCall == nil {
		fake.dataReturnsOnCall = make(map[int]struct {
			result1 []byte
		})
	}
	fake.dataReturnsOnCall[i] = struct {
		result1 []byte
	}{result1}
}

func (fake *FakeMessage) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.ackMutex.RLock()
	defer fake.ackMutex.RUnlock()
	fake.nackMutex.RLock()
	defer fake.nackMutex.RUnlock()
	fake.dataMutex.RLock()
	defer fake.dataMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMessage) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ pubsub.Message = new(FakeMessage)
