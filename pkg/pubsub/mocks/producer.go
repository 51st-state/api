// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/51st-state/api/pkg/pubsub"
)

type FakeProducer struct {
	ProduceStub        func(ctx context.Context, data []byte) error
	produceMutex       sync.RWMutex
	produceArgsForCall []struct {
		ctx  context.Context
		data []byte
	}
	produceReturns struct {
		result1 error
	}
	produceReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProducer) Produce(ctx context.Context, data []byte) error {
	var dataCopy []byte
	if data != nil {
		dataCopy = make([]byte, len(data))
		copy(dataCopy, data)
	}
	fake.produceMutex.Lock()
	ret, specificReturn := fake.produceReturnsOnCall[len(fake.produceArgsForCall)]
	fake.produceArgsForCall = append(fake.produceArgsForCall, struct {
		ctx  context.Context
		data []byte
	}{ctx, dataCopy})
	fake.recordInvocation("Produce", []interface{}{ctx, dataCopy})
	fake.produceMutex.Unlock()
	if fake.ProduceStub != nil {
		return fake.ProduceStub(ctx, data)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.produceReturns.result1
}

func (fake *FakeProducer) ProduceCallCount() int {
	fake.produceMutex.RLock()
	defer fake.produceMutex.RUnlock()
	return len(fake.produceArgsForCall)
}

func (fake *FakeProducer) ProduceArgsForCall(i int) (context.Context, []byte) {
	fake.produceMutex.RLock()
	defer fake.produceMutex.RUnlock()
	return fake.produceArgsForCall[i].ctx, fake.produceArgsForCall[i].data
}

func (fake *FakeProducer) ProduceReturns(result1 error) {
	fake.ProduceStub = nil
	fake.produceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeProducer) ProduceReturnsOnCall(i int, result1 error) {
	fake.ProduceStub = nil
	if fake.produceReturnsOnCall == nil {
		fake.produceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.produceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeProducer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.produceMutex.RLock()
	defer fake.produceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeProducer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ pubsub.Producer = new(FakeProducer)
