// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/51st-state/api/pkg/rbac"
)

type FakeRepository struct {
	GetRoleRulesStub        func(context.Context, rbac.RoleID) (rbac.RoleRules, error)
	getRoleRulesMutex       sync.RWMutex
	getRoleRulesArgsForCall []struct {
		arg1 context.Context
		arg2 rbac.RoleID
	}
	getRoleRulesReturns struct {
		result1 rbac.RoleRules
		result2 error
	}
	getRoleRulesReturnsOnCall map[int]struct {
		result1 rbac.RoleRules
		result2 error
	}
	SetRoleRulesStub        func(context.Context, rbac.RoleID, rbac.RoleRules) error
	setRoleRulesMutex       sync.RWMutex
	setRoleRulesArgsForCall []struct {
		arg1 context.Context
		arg2 rbac.RoleID
		arg3 rbac.RoleRules
	}
	setRoleRulesReturns struct {
		result1 error
	}
	setRoleRulesReturnsOnCall map[int]struct {
		result1 error
	}
	GetSubjectRolesStub        func(context.Context, rbac.SubjectID) (rbac.SubjectRoles, error)
	getSubjectRolesMutex       sync.RWMutex
	getSubjectRolesArgsForCall []struct {
		arg1 context.Context
		arg2 rbac.SubjectID
	}
	getSubjectRolesReturns struct {
		result1 rbac.SubjectRoles
		result2 error
	}
	getSubjectRolesReturnsOnCall map[int]struct {
		result1 rbac.SubjectRoles
		result2 error
	}
	SetSubjectRolesStub        func(context.Context, rbac.SubjectID, rbac.SubjectRoles) error
	setSubjectRolesMutex       sync.RWMutex
	setSubjectRolesArgsForCall []struct {
		arg1 context.Context
		arg2 rbac.SubjectID
		arg3 rbac.SubjectRoles
	}
	setSubjectRolesReturns struct {
		result1 error
	}
	setSubjectRolesReturnsOnCall map[int]struct {
		result1 error
	}
	GetSubjectRuleCountStub        func(context.Context, rbac.SubjectID, rbac.Rule) (uint64, error)
	getSubjectRuleCountMutex       sync.RWMutex
	getSubjectRuleCountArgsForCall []struct {
		arg1 context.Context
		arg2 rbac.SubjectID
		arg3 rbac.Rule
	}
	getSubjectRuleCountReturns struct {
		result1 uint64
		result2 error
	}
	getSubjectRuleCountReturnsOnCall map[int]struct {
		result1 uint64
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRepository) GetRoleRules(arg1 context.Context, arg2 rbac.RoleID) (rbac.RoleRules, error) {
	fake.getRoleRulesMutex.Lock()
	ret, specificReturn := fake.getRoleRulesReturnsOnCall[len(fake.getRoleRulesArgsForCall)]
	fake.getRoleRulesArgsForCall = append(fake.getRoleRulesArgsForCall, struct {
		arg1 context.Context
		arg2 rbac.RoleID
	}{arg1, arg2})
	fake.recordInvocation("GetRoleRules", []interface{}{arg1, arg2})
	fake.getRoleRulesMutex.Unlock()
	if fake.GetRoleRulesStub != nil {
		return fake.GetRoleRulesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getRoleRulesReturns.result1, fake.getRoleRulesReturns.result2
}

func (fake *FakeRepository) GetRoleRulesCallCount() int {
	fake.getRoleRulesMutex.RLock()
	defer fake.getRoleRulesMutex.RUnlock()
	return len(fake.getRoleRulesArgsForCall)
}

func (fake *FakeRepository) GetRoleRulesArgsForCall(i int) (context.Context, rbac.RoleID) {
	fake.getRoleRulesMutex.RLock()
	defer fake.getRoleRulesMutex.RUnlock()
	return fake.getRoleRulesArgsForCall[i].arg1, fake.getRoleRulesArgsForCall[i].arg2
}

func (fake *FakeRepository) GetRoleRulesReturns(result1 rbac.RoleRules, result2 error) {
	fake.GetRoleRulesStub = nil
	fake.getRoleRulesReturns = struct {
		result1 rbac.RoleRules
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) GetRoleRulesReturnsOnCall(i int, result1 rbac.RoleRules, result2 error) {
	fake.GetRoleRulesStub = nil
	if fake.getRoleRulesReturnsOnCall == nil {
		fake.getRoleRulesReturnsOnCall = make(map[int]struct {
			result1 rbac.RoleRules
			result2 error
		})
	}
	fake.getRoleRulesReturnsOnCall[i] = struct {
		result1 rbac.RoleRules
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) SetRoleRules(arg1 context.Context, arg2 rbac.RoleID, arg3 rbac.RoleRules) error {
	fake.setRoleRulesMutex.Lock()
	ret, specificReturn := fake.setRoleRulesReturnsOnCall[len(fake.setRoleRulesArgsForCall)]
	fake.setRoleRulesArgsForCall = append(fake.setRoleRulesArgsForCall, struct {
		arg1 context.Context
		arg2 rbac.RoleID
		arg3 rbac.RoleRules
	}{arg1, arg2, arg3})
	fake.recordInvocation("SetRoleRules", []interface{}{arg1, arg2, arg3})
	fake.setRoleRulesMutex.Unlock()
	if fake.SetRoleRulesStub != nil {
		return fake.SetRoleRulesStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.setRoleRulesReturns.result1
}

func (fake *FakeRepository) SetRoleRulesCallCount() int {
	fake.setRoleRulesMutex.RLock()
	defer fake.setRoleRulesMutex.RUnlock()
	return len(fake.setRoleRulesArgsForCall)
}

func (fake *FakeRepository) SetRoleRulesArgsForCall(i int) (context.Context, rbac.RoleID, rbac.RoleRules) {
	fake.setRoleRulesMutex.RLock()
	defer fake.setRoleRulesMutex.RUnlock()
	return fake.setRoleRulesArgsForCall[i].arg1, fake.setRoleRulesArgsForCall[i].arg2, fake.setRoleRulesArgsForCall[i].arg3
}

func (fake *FakeRepository) SetRoleRulesReturns(result1 error) {
	fake.SetRoleRulesStub = nil
	fake.setRoleRulesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) SetRoleRulesReturnsOnCall(i int, result1 error) {
	fake.SetRoleRulesStub = nil
	if fake.setRoleRulesReturnsOnCall == nil {
		fake.setRoleRulesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setRoleRulesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) GetSubjectRoles(arg1 context.Context, arg2 rbac.SubjectID) (rbac.SubjectRoles, error) {
	fake.getSubjectRolesMutex.Lock()
	ret, specificReturn := fake.getSubjectRolesReturnsOnCall[len(fake.getSubjectRolesArgsForCall)]
	fake.getSubjectRolesArgsForCall = append(fake.getSubjectRolesArgsForCall, struct {
		arg1 context.Context
		arg2 rbac.SubjectID
	}{arg1, arg2})
	fake.recordInvocation("GetSubjectRoles", []interface{}{arg1, arg2})
	fake.getSubjectRolesMutex.Unlock()
	if fake.GetSubjectRolesStub != nil {
		return fake.GetSubjectRolesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getSubjectRolesReturns.result1, fake.getSubjectRolesReturns.result2
}

func (fake *FakeRepository) GetSubjectRolesCallCount() int {
	fake.getSubjectRolesMutex.RLock()
	defer fake.getSubjectRolesMutex.RUnlock()
	return len(fake.getSubjectRolesArgsForCall)
}

func (fake *FakeRepository) GetSubjectRolesArgsForCall(i int) (context.Context, rbac.SubjectID) {
	fake.getSubjectRolesMutex.RLock()
	defer fake.getSubjectRolesMutex.RUnlock()
	return fake.getSubjectRolesArgsForCall[i].arg1, fake.getSubjectRolesArgsForCall[i].arg2
}

func (fake *FakeRepository) GetSubjectRolesReturns(result1 rbac.SubjectRoles, result2 error) {
	fake.GetSubjectRolesStub = nil
	fake.getSubjectRolesReturns = struct {
		result1 rbac.SubjectRoles
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) GetSubjectRolesReturnsOnCall(i int, result1 rbac.SubjectRoles, result2 error) {
	fake.GetSubjectRolesStub = nil
	if fake.getSubjectRolesReturnsOnCall == nil {
		fake.getSubjectRolesReturnsOnCall = make(map[int]struct {
			result1 rbac.SubjectRoles
			result2 error
		})
	}
	fake.getSubjectRolesReturnsOnCall[i] = struct {
		result1 rbac.SubjectRoles
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) SetSubjectRoles(arg1 context.Context, arg2 rbac.SubjectID, arg3 rbac.SubjectRoles) error {
	fake.setSubjectRolesMutex.Lock()
	ret, specificReturn := fake.setSubjectRolesReturnsOnCall[len(fake.setSubjectRolesArgsForCall)]
	fake.setSubjectRolesArgsForCall = append(fake.setSubjectRolesArgsForCall, struct {
		arg1 context.Context
		arg2 rbac.SubjectID
		arg3 rbac.SubjectRoles
	}{arg1, arg2, arg3})
	fake.recordInvocation("SetSubjectRoles", []interface{}{arg1, arg2, arg3})
	fake.setSubjectRolesMutex.Unlock()
	if fake.SetSubjectRolesStub != nil {
		return fake.SetSubjectRolesStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.setSubjectRolesReturns.result1
}

func (fake *FakeRepository) SetSubjectRolesCallCount() int {
	fake.setSubjectRolesMutex.RLock()
	defer fake.setSubjectRolesMutex.RUnlock()
	return len(fake.setSubjectRolesArgsForCall)
}

func (fake *FakeRepository) SetSubjectRolesArgsForCall(i int) (context.Context, rbac.SubjectID, rbac.SubjectRoles) {
	fake.setSubjectRolesMutex.RLock()
	defer fake.setSubjectRolesMutex.RUnlock()
	return fake.setSubjectRolesArgsForCall[i].arg1, fake.setSubjectRolesArgsForCall[i].arg2, fake.setSubjectRolesArgsForCall[i].arg3
}

func (fake *FakeRepository) SetSubjectRolesReturns(result1 error) {
	fake.SetSubjectRolesStub = nil
	fake.setSubjectRolesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) SetSubjectRolesReturnsOnCall(i int, result1 error) {
	fake.SetSubjectRolesStub = nil
	if fake.setSubjectRolesReturnsOnCall == nil {
		fake.setSubjectRolesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setSubjectRolesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) GetSubjectRuleCount(arg1 context.Context, arg2 rbac.SubjectID, arg3 rbac.Rule) (uint64, error) {
	fake.getSubjectRuleCountMutex.Lock()
	ret, specificReturn := fake.getSubjectRuleCountReturnsOnCall[len(fake.getSubjectRuleCountArgsForCall)]
	fake.getSubjectRuleCountArgsForCall = append(fake.getSubjectRuleCountArgsForCall, struct {
		arg1 context.Context
		arg2 rbac.SubjectID
		arg3 rbac.Rule
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetSubjectRuleCount", []interface{}{arg1, arg2, arg3})
	fake.getSubjectRuleCountMutex.Unlock()
	if fake.GetSubjectRuleCountStub != nil {
		return fake.GetSubjectRuleCountStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getSubjectRuleCountReturns.result1, fake.getSubjectRuleCountReturns.result2
}

func (fake *FakeRepository) GetSubjectRuleCountCallCount() int {
	fake.getSubjectRuleCountMutex.RLock()
	defer fake.getSubjectRuleCountMutex.RUnlock()
	return len(fake.getSubjectRuleCountArgsForCall)
}

func (fake *FakeRepository) GetSubjectRuleCountArgsForCall(i int) (context.Context, rbac.SubjectID, rbac.Rule) {
	fake.getSubjectRuleCountMutex.RLock()
	defer fake.getSubjectRuleCountMutex.RUnlock()
	return fake.getSubjectRuleCountArgsForCall[i].arg1, fake.getSubjectRuleCountArgsForCall[i].arg2, fake.getSubjectRuleCountArgsForCall[i].arg3
}

func (fake *FakeRepository) GetSubjectRuleCountReturns(result1 uint64, result2 error) {
	fake.GetSubjectRuleCountStub = nil
	fake.getSubjectRuleCountReturns = struct {
		result1 uint64
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) GetSubjectRuleCountReturnsOnCall(i int, result1 uint64, result2 error) {
	fake.GetSubjectRuleCountStub = nil
	if fake.getSubjectRuleCountReturnsOnCall == nil {
		fake.getSubjectRuleCountReturnsOnCall = make(map[int]struct {
			result1 uint64
			result2 error
		})
	}
	fake.getSubjectRuleCountReturnsOnCall[i] = struct {
		result1 uint64
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getRoleRulesMutex.RLock()
	defer fake.getRoleRulesMutex.RUnlock()
	fake.setRoleRulesMutex.RLock()
	defer fake.setRoleRulesMutex.RUnlock()
	fake.getSubjectRolesMutex.RLock()
	defer fake.getSubjectRolesMutex.RUnlock()
	fake.setSubjectRolesMutex.RLock()
	defer fake.setSubjectRolesMutex.RUnlock()
	fake.getSubjectRuleCountMutex.RLock()
	defer fake.getSubjectRuleCountMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ rbac.Repository = new(FakeRepository)
