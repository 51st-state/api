// Code generated by protoc-gen-go. DO NOT EDIT.
// source: control.proto

package rbac

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Rule struct {
	Rule                 string   `protobuf:"bytes,1,opt,name=Rule,proto3" json:"Rule,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Rule) Reset()         { *m = Rule{} }
func (m *Rule) String() string { return proto.CompactTextString(m) }
func (*Rule) ProtoMessage()    {}
func (*Rule) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{0}
}

func (m *Rule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Rule.Unmarshal(m, b)
}
func (m *Rule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Rule.Marshal(b, m, deterministic)
}
func (m *Rule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rule.Merge(m, src)
}
func (m *Rule) XXX_Size() int {
	return xxx_messageInfo_Rule.Size(m)
}
func (m *Rule) XXX_DiscardUnknown() {
	xxx_messageInfo_Rule.DiscardUnknown(m)
}

var xxx_messageInfo_Rule proto.InternalMessageInfo

func (m *Rule) GetRule() string {
	if m != nil {
		return m.Rule
	}
	return ""
}

type RoleID struct {
	ID                   string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoleID) Reset()         { *m = RoleID{} }
func (m *RoleID) String() string { return proto.CompactTextString(m) }
func (*RoleID) ProtoMessage()    {}
func (*RoleID) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{1}
}

func (m *RoleID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoleID.Unmarshal(m, b)
}
func (m *RoleID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoleID.Marshal(b, m, deterministic)
}
func (m *RoleID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleID.Merge(m, src)
}
func (m *RoleID) XXX_Size() int {
	return xxx_messageInfo_RoleID.Size(m)
}
func (m *RoleID) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleID.DiscardUnknown(m)
}

var xxx_messageInfo_RoleID proto.InternalMessageInfo

func (m *RoleID) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type RoleRules struct {
	Rules                []string `protobuf:"bytes,1,rep,name=Rules,proto3" json:"Rules,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoleRules) Reset()         { *m = RoleRules{} }
func (m *RoleRules) String() string { return proto.CompactTextString(m) }
func (*RoleRules) ProtoMessage()    {}
func (*RoleRules) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{2}
}

func (m *RoleRules) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoleRules.Unmarshal(m, b)
}
func (m *RoleRules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoleRules.Marshal(b, m, deterministic)
}
func (m *RoleRules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleRules.Merge(m, src)
}
func (m *RoleRules) XXX_Size() int {
	return xxx_messageInfo_RoleRules.Size(m)
}
func (m *RoleRules) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleRules.DiscardUnknown(m)
}

var xxx_messageInfo_RoleRules proto.InternalMessageInfo

func (m *RoleRules) GetRules() []string {
	if m != nil {
		return m.Rules
	}
	return nil
}

type SubjectID struct {
	ID                   string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubjectID) Reset()         { *m = SubjectID{} }
func (m *SubjectID) String() string { return proto.CompactTextString(m) }
func (*SubjectID) ProtoMessage()    {}
func (*SubjectID) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{3}
}

func (m *SubjectID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubjectID.Unmarshal(m, b)
}
func (m *SubjectID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubjectID.Marshal(b, m, deterministic)
}
func (m *SubjectID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubjectID.Merge(m, src)
}
func (m *SubjectID) XXX_Size() int {
	return xxx_messageInfo_SubjectID.Size(m)
}
func (m *SubjectID) XXX_DiscardUnknown() {
	xxx_messageInfo_SubjectID.DiscardUnknown(m)
}

var xxx_messageInfo_SubjectID proto.InternalMessageInfo

func (m *SubjectID) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type SubjectRoles struct {
	RoleIDs              []string `protobuf:"bytes,1,rep,name=RoleIDs,proto3" json:"RoleIDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubjectRoles) Reset()         { *m = SubjectRoles{} }
func (m *SubjectRoles) String() string { return proto.CompactTextString(m) }
func (*SubjectRoles) ProtoMessage()    {}
func (*SubjectRoles) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{4}
}

func (m *SubjectRoles) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubjectRoles.Unmarshal(m, b)
}
func (m *SubjectRoles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubjectRoles.Marshal(b, m, deterministic)
}
func (m *SubjectRoles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubjectRoles.Merge(m, src)
}
func (m *SubjectRoles) XXX_Size() int {
	return xxx_messageInfo_SubjectRoles.Size(m)
}
func (m *SubjectRoles) XXX_DiscardUnknown() {
	xxx_messageInfo_SubjectRoles.DiscardUnknown(m)
}

var xxx_messageInfo_SubjectRoles proto.InternalMessageInfo

func (m *SubjectRoles) GetRoleIDs() []string {
	if m != nil {
		return m.RoleIDs
	}
	return nil
}

type SetRoleRulesRequest struct {
	RoleID               *RoleID    `protobuf:"bytes,1,opt,name=RoleID,proto3" json:"RoleID,omitempty"`
	RoleRules            *RoleRules `protobuf:"bytes,2,opt,name=RoleRules,proto3" json:"RoleRules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *SetRoleRulesRequest) Reset()         { *m = SetRoleRulesRequest{} }
func (m *SetRoleRulesRequest) String() string { return proto.CompactTextString(m) }
func (*SetRoleRulesRequest) ProtoMessage()    {}
func (*SetRoleRulesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{5}
}

func (m *SetRoleRulesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetRoleRulesRequest.Unmarshal(m, b)
}
func (m *SetRoleRulesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetRoleRulesRequest.Marshal(b, m, deterministic)
}
func (m *SetRoleRulesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetRoleRulesRequest.Merge(m, src)
}
func (m *SetRoleRulesRequest) XXX_Size() int {
	return xxx_messageInfo_SetRoleRulesRequest.Size(m)
}
func (m *SetRoleRulesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetRoleRulesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetRoleRulesRequest proto.InternalMessageInfo

func (m *SetRoleRulesRequest) GetRoleID() *RoleID {
	if m != nil {
		return m.RoleID
	}
	return nil
}

func (m *SetRoleRulesRequest) GetRoleRules() *RoleRules {
	if m != nil {
		return m.RoleRules
	}
	return nil
}

type SetSubjectRolesRequest struct {
	SubjectID            *SubjectID    `protobuf:"bytes,1,opt,name=SubjectID,proto3" json:"SubjectID,omitempty"`
	SubjectRoles         *SubjectRoles `protobuf:"bytes,2,opt,name=SubjectRoles,proto3" json:"SubjectRoles,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SetSubjectRolesRequest) Reset()         { *m = SetSubjectRolesRequest{} }
func (m *SetSubjectRolesRequest) String() string { return proto.CompactTextString(m) }
func (*SetSubjectRolesRequest) ProtoMessage()    {}
func (*SetSubjectRolesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{6}
}

func (m *SetSubjectRolesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetSubjectRolesRequest.Unmarshal(m, b)
}
func (m *SetSubjectRolesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetSubjectRolesRequest.Marshal(b, m, deterministic)
}
func (m *SetSubjectRolesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetSubjectRolesRequest.Merge(m, src)
}
func (m *SetSubjectRolesRequest) XXX_Size() int {
	return xxx_messageInfo_SetSubjectRolesRequest.Size(m)
}
func (m *SetSubjectRolesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetSubjectRolesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetSubjectRolesRequest proto.InternalMessageInfo

func (m *SetSubjectRolesRequest) GetSubjectID() *SubjectID {
	if m != nil {
		return m.SubjectID
	}
	return nil
}

func (m *SetSubjectRolesRequest) GetSubjectRoles() *SubjectRoles {
	if m != nil {
		return m.SubjectRoles
	}
	return nil
}

type IsSubjectAllowedRequest struct {
	SubjectID            *SubjectID `protobuf:"bytes,1,opt,name=SubjectID,proto3" json:"SubjectID,omitempty"`
	Rule                 *Rule      `protobuf:"bytes,2,opt,name=Rule,proto3" json:"Rule,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *IsSubjectAllowedRequest) Reset()         { *m = IsSubjectAllowedRequest{} }
func (m *IsSubjectAllowedRequest) String() string { return proto.CompactTextString(m) }
func (*IsSubjectAllowedRequest) ProtoMessage()    {}
func (*IsSubjectAllowedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{7}
}

func (m *IsSubjectAllowedRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsSubjectAllowedRequest.Unmarshal(m, b)
}
func (m *IsSubjectAllowedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsSubjectAllowedRequest.Marshal(b, m, deterministic)
}
func (m *IsSubjectAllowedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsSubjectAllowedRequest.Merge(m, src)
}
func (m *IsSubjectAllowedRequest) XXX_Size() int {
	return xxx_messageInfo_IsSubjectAllowedRequest.Size(m)
}
func (m *IsSubjectAllowedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsSubjectAllowedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsSubjectAllowedRequest proto.InternalMessageInfo

func (m *IsSubjectAllowedRequest) GetSubjectID() *SubjectID {
	if m != nil {
		return m.SubjectID
	}
	return nil
}

func (m *IsSubjectAllowedRequest) GetRule() *Rule {
	if m != nil {
		return m.Rule
	}
	return nil
}

func init() {
	proto.RegisterType((*Rule)(nil), "rbac.Rule")
	proto.RegisterType((*RoleID)(nil), "rbac.RoleID")
	proto.RegisterType((*RoleRules)(nil), "rbac.RoleRules")
	proto.RegisterType((*SubjectID)(nil), "rbac.SubjectID")
	proto.RegisterType((*SubjectRoles)(nil), "rbac.SubjectRoles")
	proto.RegisterType((*SetRoleRulesRequest)(nil), "rbac.SetRoleRulesRequest")
	proto.RegisterType((*SetSubjectRolesRequest)(nil), "rbac.SetSubjectRolesRequest")
	proto.RegisterType((*IsSubjectAllowedRequest)(nil), "rbac.IsSubjectAllowedRequest")
}

func init() { proto.RegisterFile("control.proto", fileDescriptor_0c5120591600887d) }

var fileDescriptor_0c5120591600887d = []byte{
	// 369 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0xcd, 0x4e, 0xc2, 0x40,
	0x10, 0x86, 0x8a, 0x90, 0x8e, 0x55, 0xcc, 0x68, 0xb0, 0x16, 0x35, 0xb8, 0xf1, 0xc0, 0x85, 0x92,
	0x60, 0x62, 0xbc, 0x1a, 0x30, 0xa4, 0xf1, 0xb6, 0x3c, 0x81, 0xc5, 0x15, 0x43, 0x56, 0x17, 0xe9,
	0x36, 0xc6, 0x93, 0xcf, 0xe8, 0x1b, 0x99, 0x76, 0xb6, 0xd0, 0x56, 0xf0, 0xe0, 0xa9, 0xdd, 0xd9,
	0xd9, 0x6f, 0xbe, 0x9f, 0x81, 0xfd, 0xa9, 0x7a, 0xd3, 0x4b, 0x25, 0xfd, 0xc5, 0x52, 0x69, 0x85,
	0xb5, 0x65, 0xf8, 0x38, 0xf5, 0xda, 0x33, 0xa5, 0x66, 0x52, 0xf4, 0xd3, 0x5a, 0x18, 0x3f, 0xf7,
	0xc5, 0xeb, 0x42, 0x7f, 0x52, 0x0b, 0xf3, 0xa0, 0xc6, 0x63, 0x29, 0x10, 0xe9, 0xeb, 0x56, 0x3b,
	0xd5, 0xae, 0xcd, 0xd3, 0x7f, 0xe6, 0x42, 0x9d, 0x2b, 0x29, 0x82, 0x11, 0x1e, 0x80, 0x15, 0x8c,
	0xcc, 0x9d, 0x15, 0x8c, 0xd8, 0x25, 0xd8, 0xc9, 0x4d, 0xd2, 0x15, 0xe1, 0x31, 0xec, 0xa6, 0x3f,
	0x6e, 0xb5, 0xb3, 0xd3, 0xb5, 0x39, 0x1d, 0x58, 0x1b, 0xec, 0x49, 0x1c, 0xce, 0xc5, 0x54, 0x6f,
	0x78, 0xdf, 0x05, 0xc7, 0x5c, 0x26, 0x30, 0x11, 0xba, 0xd0, 0xa0, 0x49, 0x19, 0x48, 0x76, 0x64,
	0x73, 0x38, 0x9a, 0x08, 0xbd, 0x1a, 0xc6, 0xc5, 0x7b, 0x2c, 0x22, 0x8d, 0x57, 0x19, 0xb5, 0x14,
	0x74, 0x6f, 0xe0, 0xf8, 0x89, 0x54, 0x9f, 0x6a, 0x3c, 0xa3, 0xdd, 0xcb, 0xd1, 0x74, 0xad, 0xb4,
	0xb1, 0xb9, 0x6e, 0x24, 0xc0, 0x75, 0x07, 0xfb, 0x82, 0xd6, 0x44, 0xe8, 0x3c, 0xb1, 0x6c, 0x5c,
	0x2f, 0x27, 0xc6, 0x4c, 0x34, 0x40, 0xab, 0x32, 0xcf, 0xc9, 0xbd, 0x29, 0xca, 0x33, 0xa3, 0xb1,
	0xf0, 0x82, 0xf0, 0x0b, 0x7d, 0xec, 0x05, 0x4e, 0x82, 0xc8, 0x54, 0xee, 0xa4, 0x54, 0x1f, 0xe2,
	0xe9, 0x9f, 0x0c, 0x2e, 0x4c, 0x9c, 0x34, 0x19, 0x8c, 0xe8, 0x58, 0x0a, 0x8a, 0x76, 0xf0, 0x6d,
	0x41, 0x63, 0x48, 0xbb, 0x82, 0x7d, 0x70, 0xc6, 0x39, 0x8b, 0xb1, 0xe0, 0xa5, 0x57, 0x36, 0x8c,
	0x55, 0x70, 0x08, 0x4e, 0x3e, 0x13, 0x3c, 0x35, 0x44, 0x7e, 0xe7, 0xe4, 0xb5, 0x7c, 0x5a, 0x3e,
	0x3f, 0x5b, 0x3e, 0xff, 0x3e, 0x59, 0x3e, 0x56, 0xc1, 0x5b, 0x68, 0x8e, 0x8b, 0x66, 0x63, 0x59,
	0x90, 0xb7, 0xc1, 0x31, 0x56, 0xc1, 0x00, 0x9a, 0xa5, 0x98, 0xf0, 0x6c, 0xc5, 0x60, 0x43, 0x7a,
	0x7f, 0x90, 0x78, 0x80, 0xc3, 0xb2, 0xe1, 0x78, 0x4e, 0x58, 0x5b, 0x82, 0xd8, 0x0e, 0x16, 0xd6,
	0xd3, 0xca, 0xf5, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x63, 0x39, 0x7c, 0xdc, 0x85, 0x03, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ControlClient is the client API for Control service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ControlClient interface {
	GetRoleRules(ctx context.Context, in *RoleID, opts ...grpc.CallOption) (*RoleRules, error)
	SetRoleRules(ctx context.Context, in *SetRoleRulesRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetSubjectRoles(ctx context.Context, in *SubjectID, opts ...grpc.CallOption) (*SubjectRoles, error)
	SetSubjectRoles(ctx context.Context, in *SetSubjectRolesRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	IsSubjectAllowed(ctx context.Context, in *IsSubjectAllowedRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type controlClient struct {
	cc *grpc.ClientConn
}

func NewControlClient(cc *grpc.ClientConn) ControlClient {
	return &controlClient{cc}
}

func (c *controlClient) GetRoleRules(ctx context.Context, in *RoleID, opts ...grpc.CallOption) (*RoleRules, error) {
	out := new(RoleRules)
	err := c.cc.Invoke(ctx, "/rbac.Control/GetRoleRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) SetRoleRules(ctx context.Context, in *SetRoleRulesRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/rbac.Control/SetRoleRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) GetSubjectRoles(ctx context.Context, in *SubjectID, opts ...grpc.CallOption) (*SubjectRoles, error) {
	out := new(SubjectRoles)
	err := c.cc.Invoke(ctx, "/rbac.Control/GetSubjectRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) SetSubjectRoles(ctx context.Context, in *SetSubjectRolesRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/rbac.Control/SetSubjectRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) IsSubjectAllowed(ctx context.Context, in *IsSubjectAllowedRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/rbac.Control/IsSubjectAllowed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControlServer is the server API for Control service.
type ControlServer interface {
	GetRoleRules(context.Context, *RoleID) (*RoleRules, error)
	SetRoleRules(context.Context, *SetRoleRulesRequest) (*empty.Empty, error)
	GetSubjectRoles(context.Context, *SubjectID) (*SubjectRoles, error)
	SetSubjectRoles(context.Context, *SetSubjectRolesRequest) (*empty.Empty, error)
	IsSubjectAllowed(context.Context, *IsSubjectAllowedRequest) (*empty.Empty, error)
}

func RegisterControlServer(s *grpc.Server, srv ControlServer) {
	s.RegisterService(&_Control_serviceDesc, srv)
}

func _Control_GetRoleRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).GetRoleRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.Control/GetRoleRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).GetRoleRules(ctx, req.(*RoleID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_SetRoleRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRoleRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).SetRoleRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.Control/SetRoleRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).SetRoleRules(ctx, req.(*SetRoleRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_GetSubjectRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).GetSubjectRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.Control/GetSubjectRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).GetSubjectRoles(ctx, req.(*SubjectID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_SetSubjectRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSubjectRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).SetSubjectRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.Control/SetSubjectRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).SetSubjectRoles(ctx, req.(*SetSubjectRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_IsSubjectAllowed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsSubjectAllowedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).IsSubjectAllowed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.Control/IsSubjectAllowed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).IsSubjectAllowed(ctx, req.(*IsSubjectAllowedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Control_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rbac.Control",
	HandlerType: (*ControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRoleRules",
			Handler:    _Control_GetRoleRules_Handler,
		},
		{
			MethodName: "SetRoleRules",
			Handler:    _Control_SetRoleRules_Handler,
		},
		{
			MethodName: "GetSubjectRoles",
			Handler:    _Control_GetSubjectRoles_Handler,
		},
		{
			MethodName: "SetSubjectRoles",
			Handler:    _Control_SetSubjectRoles_Handler,
		},
		{
			MethodName: "IsSubjectAllowed",
			Handler:    _Control_IsSubjectAllowed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "control.proto",
}
